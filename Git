Git

一、什么是git
	分布式版本控制软件
	文件 --- 本地版本控制 --- 集中式版本控制(svn) --- 分布式版本控制(git)

二、Git安装
	官网: https://gitforwindows.org/
	教程: https://blog.csdn.net/huangqqdy/article/details/83032408

三、Git配置

	简介
		Git提供了一个叫做git config的工具，专门用来配置或读取相应的工作环境变量
		这些环境决定了Git在各个环节的具体工作方式和行为

	相关的配置文件
		/etc/gitconfig
			系统中对所有用户都普遍适用的配置   git config --system:读写的就是该配置文件
		~/.gitconfig
			用户目录下的配置文件只适用于该用户   git config --global:读写的就是该配置文件
		.git/config
			当前项目的Git目录下的配置文件   该配置仅对当前项目有效 

		每一个级别的配置都会覆盖上层相同的配置 --- .git/config 里面的配置会覆盖 ~/.gitconfig中同名的变量

	配置用户信息
		git config --global user.name "fredzhan"
		git config --global user.email "fredzhan@liteon.com"

		注:使用--global,更改的配置文件就是位于用户主目录下的那个,以后所有的项目都会默认使用这里面的配置
			如果要在某个特定的项目中使用其他名字或者电邮 去掉--global即可   新的设定就在.git/config下

	配置文本编辑器
		git config --global core.edit emacs
		git config --global core.edit vim

	差异分析工具:vimdiff,kdiff3,tkdiff,meld...
		git config --global merge.tool vimdiff

	查看配置信息
		git config --list

四、Git工作流程
	1. 克隆Git资源作为工作目录
	2. 在克隆的资源上添加或修改文件
	3. 如果其他人修改了,可以更新资源
	4. 在提交前查看修改
	5. 提交修改
	6. 修改完成后，如果发现错误，可以撤回提交并再次修改并提交

五、Git工作区、暂存区和版本库
	
	工作区:就是你在电脑里看到的目录
	暂存区:stage或index 一般存放在".git目录下"的index文件(.git/index)
	版本库:工作区有一个隐藏目录.git 

	在Git中 HEAD表示当前版本  HEAD^ 上一个版本   HEAD^^ 上上一个版本
		git reset --hard commit_id :回退到某一个版本
		git log :查看提交历史，以便确定要回退到哪个版本
		git reflog：查看命令历史，以便确定要回退到哪个版本

	Git 跟踪文件  跟踪的是文件的修改
		工作区 --> git add --> 暂存区 ---> git commit ---> 版本库
		工作区 --> git add --> 暂存区 ---> git add --> 暂存区 --->git commit ---> 版本库


六、Git创建仓库
	
	git init:初始化一个Git仓库
		git init命令执行后，Git仓库会生成一个.git目录，该目录包含了资源所有的元数据

	使用当前目录作为Git仓库
		git init
	使用指定目录作为Git仓库
		git init dirname
	如果要将目录下的文件纳入版本控制
		git add . / git add filename
		git commit -m '初始化项目版本'

	从现有Git仓库中拷贝项目
		git clone <repo>
	如果要克隆到指定的目录
		git clone <repo> <directory>
			repo：git仓库
			directory：本地目录
	eg:
		克隆Ruby语言的Git代码仓库Grit
			git clone git://github.com/schacon/grit.git
		克隆到自己定义的新建目录
			git clone git://github.com/schacon/grit.git mygrit

七、Git基本操作

	获取和创建项目命令
		git init：在目录中创建新的Git仓库
		git clone：拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。

	基本快照
		git add: 将指定文件放入到暂存区
		git status: 查看项目的当前状态
		git diff: 查看执行git status的结果的详细信息
			gitdiff 命令显示已写入缓存与已修改但未写入缓存的改动区别

			尚未缓存的改动:	 git diff
			查看已缓存的改动: git diff --cached
			查看已缓存的与未缓存的所有改动: git diff HEAD
			显示摘要而非整个diff: git diff --stat

		git commit:
			git add 将想要快照的内容写入缓存区
			git commit 将缓存区的内容添加到仓库中
				git commit -m '注释内容'

			注:如果没有加-m选项，Git会尝试为你打开一个编辑器以填写提交信息
				如果在配置中找不到相关的信息，默认会打开vim

		git reset HEAD: 取消已缓存的内容
			取消之前git add的内容

		git rm：从git中移除某个文件
			git rm <file>
			git rm -f <file>：删除之前修改过且已经放入暂存区域  -f：强制删除
			git rm --cached <file>：把文件从暂存区移除，但任然希望保留在当前工作目录
			如果文件已经被提交到版本库，则不用担心误删文件，但是你只能恢复文件到最新版本，会丢失最近一次提交后修改内容

		git log : 显示从最近到最远的提交日志
			git log --pretty=oneline  一行显示

		git reset --hard commit_id :回退到某一指定版本
		git log :查看提交历史，以便确定要回退到哪个版本
		git reflog：查看命令历史，以便确定要回退到哪个版本

	撤销修改
		git checkout -- filename ：丢弃工作区的修改
			git chekcout -- readme.txt： 把readme.txt文件在工作区的修改全部撤销
				readme.txt自修改后还没有被放到暂存区  撤销修改就回到和版本库一模一样的状态
				readme.txt已经添加到暂存区，又作了修改，撤销修改就回到添加暂存区后的状态

			让文件回到最近一次git commit 或git add 时的状态

		git reset HEAD <file>：可以把暂存区的修改撤销掉，重新放回工作区

	注:
		当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改 使用命令 git checkout -- file
		当你改乱了工作区某个文件内容，还添加到了暂存区，向丢弃修改:git reset HEAD <file> 重复第一步
		如果已经提交到了不合适的修改到版本库，可考虑版本回退

八、分支管理
	查看分支 git branch
	创建分支 git branch <name>
	切换分支 git checkout <name> 或者 git switch <name>
	创建+切换分支 git checkout -b <name> 或者 git switch -c <name>
	合并某分支到当前分支 git merge <name>
	删除分支 git branch -d <name>

	冲突解决:
		当Git无法自动合并分支时，必须首先解决冲突。解决冲突后，再提交，合并完成
		解决冲突的方法就是吧合并失败的文件手动编辑为我们想要的内容，再提交
		用git log --graph 命令可以查看分支合并图